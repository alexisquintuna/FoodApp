{"ast":null,"code":"var _jsxFileName = \"/Users/alexisquintuna/Desktop/React/FoodAppReact/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../../hooks/use-input\";\nimport classes from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const isNotEmpty = value => value.trim() !== \"\";\n\n  const notFiveChara = value => value.trim().length === 5;\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHandler: streetBlurHandler,\n    reset: resetStreetInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredCity,\n    isValid: enteredCityIsValid,\n    hasError: cityInputHasError,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler,\n    reset: resetCityInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredPostalCode,\n    isValid: enteredPostalCodeIsValid,\n    hasError: postalCodeInputHasError,\n    valueChangeHandler: postalCodeChangeHandler,\n    inputBlurHandler: postalCodeBlurHandler,\n    reset: resetPostalCodeInput\n  } = useInput(notFiveChara);\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid) {\n    formIsValid = true;\n  }\n\n  const confirmHandler = event => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm(console.log(\"button clicked\"), {\n      name: enteredName,\n      street: enteredStreet,\n      postalCode: enteredPostalCode,\n      city: enteredCity\n    });\n    console.log(\"Form Was Submitted!\");\n    console.log(enteredName, enteredStreetIsValid, enteredCity, enteredPostalCode);\n  };\n\n  const nameControlClasses = `${classes.control} ${!nameInputHasError ? \"\" : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${!streetInputHasError ? \"\" : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${!cityInputHasError ? \"\" : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${!postalCodeInputHasError ? \"\" : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter A Valid Name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetChangeHandler,\n        onBlur: streetBlurHandler,\n        value: enteredStreet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), streetInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter A Valid Street Address!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        onChange: postalCodeChangeHandler,\n        onBlur: postalCodeBlurHandler,\n        value: enteredPostalCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), postalCodeInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter A Valid Postal Code (5 characters)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityChangeHandler,\n        onBlur: cityBlurHandler,\n        value: enteredCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), cityInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter A Valid City!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"A5tGR4xMfgK91VDagcsxHibykiA=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/alexisquintuna/Desktop/React/FoodAppReact/src/components/Cart/Checkout.js"],"names":["useInput","classes","Checkout","props","isNotEmpty","value","trim","notFiveChara","length","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","enteredStreet","enteredStreetIsValid","streetInputHasError","streetChangeHandler","streetBlurHandler","resetStreetInput","enteredCity","enteredCityIsValid","cityInputHasError","cityChangeHandler","cityBlurHandler","resetCityInput","enteredPostalCode","enteredPostalCodeIsValid","postalCodeInputHasError","postalCodeChangeHandler","postalCodeBlurHandler","resetPostalCodeInput","formIsValid","confirmHandler","event","preventDefault","onConfirm","console","log","name","street","postalCode","city","nameControlClasses","control","invalid","streetControlClasses","cityControlClasses","postalCodeControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import useInput from \"../../hooks/use-input\";\nimport classes from \"./Checkout.module.css\";\n\nconst Checkout = (props) => {\n  const isNotEmpty = (value) => value.trim() !== \"\";\n  const notFiveChara = (value) => value.trim().length === 5;\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHandler: streetBlurHandler,\n    reset: resetStreetInput,\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredCity,\n    isValid: enteredCityIsValid,\n    hasError: cityInputHasError,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler,\n    reset: resetCityInput,\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredPostalCode,\n    isValid: enteredPostalCodeIsValid,\n    hasError: postalCodeInputHasError,\n    valueChangeHandler: postalCodeChangeHandler,\n    inputBlurHandler: postalCodeBlurHandler,\n    reset: resetPostalCodeInput,\n  } = useInput(notFiveChara);\n\n  let formIsValid = false;\n\n  if (\n    enteredNameIsValid &&\n    enteredStreetIsValid &&\n    enteredCityIsValid &&\n    enteredPostalCodeIsValid\n  ) {\n    formIsValid = true;\n  }\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n    \n    props.onConfirm(\n        console.log(\"button clicked\"), {\n        name: enteredName,\n        street: enteredStreet,\n        postalCode: enteredPostalCode,\n        city: enteredCity,\n    });\n\n    console.log(\"Form Was Submitted!\");\n    console.log(\n      enteredName,\n      enteredStreetIsValid,\n      enteredCity,\n      enteredPostalCode\n    );\n    \n\n    \n  };\n\n  const nameControlClasses = `${classes.control} ${\n    !nameInputHasError ? \"\" : classes.invalid\n  }`;\n  const streetControlClasses = `${classes.control} ${\n    !streetInputHasError ? \"\" : classes.invalid\n  }`;\n  const cityControlClasses = `${classes.control} ${\n    !cityInputHasError ? \"\" : classes.invalid\n  }`;\n  const postalCodeControlClasses = `${classes.control} ${\n    !postalCodeInputHasError ? \"\" : classes.invalid\n  }`;\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && <p>Please Enter A Valid Name!</p>}\n      </div>\n      <div className={streetControlClasses}>\n        <label htmlFor=\"street\">Street</label>\n        <input\n          type=\"text\"\n          id=\"street\"\n          onChange={streetChangeHandler}\n          onBlur={streetBlurHandler}\n          value={enteredStreet}\n        />\n        {streetInputHasError && <p>Please Enter A Valid Street Address!</p>}\n      </div>\n      <div className={postalCodeControlClasses}>\n        <label htmlFor=\"postal\">Postal Code</label>\n        <input\n          type=\"text\"\n          id=\"postal\"\n          onChange={postalCodeChangeHandler}\n          onBlur={postalCodeBlurHandler}\n          value={enteredPostalCode}\n        />\n        {postalCodeInputHasError && (\n          <p>Please Enter A Valid Postal Code (5 characters)</p>\n        )}\n      </div>\n      <div className={cityControlClasses}>\n        <label htmlFor=\"city\">City</label>\n        <input\n          type=\"text\"\n          id=\"city\"\n          onChange={cityChangeHandler}\n          onBlur={cityBlurHandler}\n          value={enteredCity}\n        />\n        {cityInputHasError && <p>Please Enter A Valid City!</p>}\n      </div>\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}