{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nconst initialInputState = {\n  value: '',\n  isTouch: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === 'BLUR') {\n    return {\n      isTouched: false,\n      value: ''\n    };\n  }\n\n  if (action.type === 'RESET') {\n    return {\n      isTouched: false,\n      value: ''\n    };\n  }\n\n  return initialInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: inputState.value,\n    street: inputState.value,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/alexisquintuna/Desktop/React/FoodAppReact/src/hooks/use-input.js"],"names":["useReducer","initialInputState","value","isTouch","inputStateReducer","state","action","type","isTouched","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","street"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,EADe;AAEtBC,EAAAA,OAAO,EAAE;AAFa,CAA1B;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBM,MAAAA,SAAS,EAAEH,KAAK,CAACG;AAAxC,KAAP;AACH;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AACxB,WAAO;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBN,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACH;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,WAAO;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBN,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACH;;AACD,SAAOD,iBAAP;AACH,CAXD;;AAaA,MAAMQ,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBZ,UAAU,CAACI,iBAAD,EAAoBH,iBAApB,CAAzC;AAEA,QAAMY,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACT,KAAZ,CAAlC;AACA,QAAMY,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACH,SAA7C;;AAEA,QAAMO,kBAAkB,GAAIC,KAAD,IAAW;AAClCJ,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,OAAP;AAAgBL,MAAAA,KAAK,EAAEc,KAAK,CAACC,MAAN,CAAaf;AAApC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMgB,gBAAgB,GAAIF,KAAD,IAAW;AAChCJ,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMY,KAAK,GAAG,MAAM;AAChBP,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAIA,SAAO;AACHL,IAAAA,KAAK,EAAES,UAAU,CAACT,KADf;AAEHkB,IAAAA,MAAM,EAAET,UAAU,CAACT,KAFhB;AAGHY,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHG,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AASH,CAzBD;;GAAMV,Q;;AA2BN,eAAeA,QAAf","sourcesContent":["import { useReducer } from 'react';\n\nconst initialInputState = {\n    value: '',\n    isTouch: false\n};\nconst inputStateReducer = (state, action) => {\n    if (action.type === 'INPUT') {\n        return { value: action.value, isTouched: state.isTouched}\n    }\n    if (action.type === 'BLUR') {\n        return { isTouched: false, value: ''};\n    }\n    if (action.type === 'RESET') {\n        return { isTouched: false, value: ''};\n    }\n    return initialInputState\n};\n\nconst useInput = (validateValue) => {\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n\n    const valueIsValid = validateValue(inputState.value);\n    const hasError = !valueIsValid && inputState.isTouched;\n\n    const valueChangeHandler = (event) => {\n        dispatch({type: 'INPUT', value: event.target.value})\n    };\n    const inputBlurHandler = (event) => {\n        dispatch({type: 'BLUR'})\n    };\n    const reset = () => {\n        dispatch({type: 'RESET'})\n    };\n\n    return {\n        value: inputState.value,\n        street: inputState.value,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler,\n        reset,\n\n    };\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}